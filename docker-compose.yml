version: '3.8'

services:
  redis:
    image: redis:7.0-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - cache:/data

  database:
    image: 'postgres:latest'
    restart: always
    ports:
      - '5432:5432'
    env_file:
      - src/.env
    volumes:
      - ./database/db-data/:/var/lib/postgresql/data/
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql

  database-test:
    image: 'postgres:latest'
    restart: unless-stopped
    ports:
      - '5433:5432'
    env_file:
      - src/.env
      
  pgadmin:
    image: dpage/pgadmin4
    restart: always
    ports:
      - '15433:80'
    env_file:
      - src/.env
    depends_on:
      - database
    volumes:
      - ./database/pgadmin-data/:/var/lib/pgadmin/

  flask-users-api:
    build:
      context: src
      dockerfile: users.Dockerfile
    restart: always
    depends_on:
      - database
      - redis
    expose:
      - 8000
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8000 app:app

  flask-vehicles-api:
    build:
      context: src
      dockerfile: vehicles.Dockerfile
    restart: always
    depends_on:
      - database
      - redis
    expose:
      - 8001
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8001 app:app

  flask-rides-api:
    build:
      context: src
      dockerfile: rides.Dockerfile
    restart: always
    depends_on:
      - database
      - redis
    expose:
      - 8002
    command: gunicorn -w 3 -t 60 -b 0.0.0.0:8002 app:app

  nginx:
    build: ./nginx
    ports:
      - '8081:80'
      - '8082:81'
      - '8083:82'
    depends_on:
      - flask-users-api
      - flask-vehicles-api
      - flask-rides-api

volumes:
  cache:
    driver: local